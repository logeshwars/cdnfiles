//  util.js
var Util=function($,transition,MAX_UID,Util){function toType(obj){return{}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();}function getSpecialTransitionEndEvent(){return{bindType:transition.end,delegateType:transition.end,handle:function handle(event){return $(event.target).is(this)?event.handleObj.handler.apply(this,arguments):undefined;}};}function transitionEndTest(){return typeof window!=='undefined'&&window.QUnit?!1:{end:'transitionend'};}function transitionEndEmulator(duration){var _this=this;var called=!1;return $(this).one(Util.TRANSITION_END,function(){called=!0;}),setTimeout(function(){called||Util.triggerTransitionEnd(_this);},duration),this;}function setTransitionEndSupport(){transition=transitionEndTest(),$.fn.emulateTransitionEnd=transitionEndEmulator,Util.supportsTransitionEnd()&&($.event.special[Util.TRANSITION_END]=getSpecialTransitionEndEvent());}function escapeId(selector){return selector=typeof $.escapeSelector==='function'?$.escapeSelector(selector).substr(1):selector.replace(/(:|\.|\[|\]|,|=|@)/g,'\\$1'),selector;}return transition=!1,MAX_UID=1000000,Util={TRANSITION_END:'bsTransitionEnd',getUID:function getUID(prefix){do prefix+=~~(Math.random()*MAX_UID);while(document.getElementById(prefix));return prefix;},getSelectorFromElement:function getSelectorFromElement(element){var selector=element.getAttribute('data-target');(!selector||selector==='#')&&(selector=element.getAttribute('href')||''),selector.charAt(0)==='#'&&(selector=escapeId(selector));try{var $selector=$(document).find(selector);return $selector.length>0?selector:null;}catch(err){return null;}},reflow:function reflow(element){return element.offsetHeight;},triggerTransitionEnd:function triggerTransitionEnd(element){$(element).trigger(transition.end);},supportsTransitionEnd:function supportsTransitionEnd(){return Boolean(transition);},isElement:function isElement(obj){return(obj[0]||obj).nodeType;},typeCheckConfig:function typeCheckConfig(componentName,config,configTypes){for(var property in configTypes)if(Object.prototype.hasOwnProperty.call(configTypes,property)){var expectedTypes=configTypes[property];var value=config[property];var valueType=value&&Util.isElement(value)?'element':toType(value);if(!new RegExp(expectedTypes).test(valueType))throw new Error(componentName.toUpperCase()+': '+('Option "'+property+'" provided type "'+valueType+'" ')+('but expected type "'+expectedTypes+'".'));}}},setTransitionEndSupport(),Util;}($);